/*Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.
*/




class Solution {
    public boolean isValid(String s) {
        if (s.length() % 2 != 0) {
            return false;
        }
        if ((s.charAt(0) == ')') || (s.charAt(0) == '}') || (s.charAt(0) == ']')) {
            return false;
        }
        boolean valid = true;
        Stack < Character > stack = new Stack < > ();

        for (int i = 0; i < s.length(); ++i) {
            if ((s.charAt(i) == '(') || (s.charAt(i) == '{') || (s.charAt(i) == '[')) {
                stack.push(s.charAt(i));
            }
            if (stack.empty() && ((s.charAt(i) == ')') || (s.charAt(i) == '}') || (s.charAt(i) == ']'))) {
                return false;
            } else if ((s.charAt(i) == ')') || (s.charAt(i) == '}') || (s.charAt(i) == ']')) {
                if (s.charAt(i) == ')' && stack.peek() == '(') {
                    stack.pop();

                } else if (s.charAt(i) == '}' && stack.peek() == '{') {
                    stack.pop();

                } else if (s.charAt(i) == ']' && stack.peek() == '[') {
                    stack.pop();
                } else
                    return false;
            }
        }

        if (stack.empty()) {
            return true;
        } else {
            return false;
        }
    }
}
