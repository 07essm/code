//There is a collection of input strings and a collection of query strings. 
//For each query string, determine how many times it occurs in the list of input strings. Return an array of the results. 




import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    public static List<Integer> matchingStrings(List<String> strings, List<String> queries) {
    int i =0;
    int j =0;
    int counter =0;
    String str1;
    String str2;
    List<Integer> arr2 = new ArrayList<>();

    for(i =0;i<queries.size();i++){
        System.out.println(queries.size());
        for(j =0;j<strings.size();j++){
           str1= queries.get(i);
           str2= strings.get(j);
           if(str1.equals(str2))
           {
             counter=counter+1;  
           }
        }
        arr2.add(i,counter);
        counter = 0;
    }
        return arr2;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int stringsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> strings = new ArrayList<>();

        for (int i = 0; i < stringsCount; i++) {
            String stringsItem = bufferedReader.readLine();
            strings.add(stringsItem);
        }

        int queriesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> queries = new ArrayList<>();

        for (int i = 0; i < queriesCount; i++) {
            String queriesItem = bufferedReader.readLine();
            queries.add(queriesItem);
        }

        List<Integer> res = Result.matchingStrings(strings, queries);

        for (int i = 0; i < res.size(); i++) {
            bufferedWriter.write(String.valueOf(res.get(i)));

            if (i != res.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
